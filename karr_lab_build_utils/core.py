""" Karr Lab build utilities

:Author: Jonathan Karr <karr@mssm.edu>
:Date: 2017-08-02
:Copyright: 2016, Karr Lab
:License: MIT
"""

from glob import glob
from junit2htmlreport.parser import Junit as JunitParser
from nose2unitth.core import Converter as Nose2UnitthConverter
from unitth.core import UnitTH
import iocapture
import os
import pysftp
import shutil
import subprocess
import sys
import tempfile


class BuildHelper(object):
    """ Utility class to help build projects:
    * Run tests
    * Generate HTML test history reports
    * Generate HTML coverage reports
    * Generate HTML API documentation
    * Archive reports to lab server and Coveralls

    Attributes:
        code_server_hostname (:obj:`str`): hostname of server where reports should be uploaded
        code_server_username (:obj:`str`): username for server where reports should be uploaded
        code_server_password (:obj:`str`): password for server where reports should be uploaded
        code_server_base_dir (:obj:`str`): base directory on server where reports should be uploaded

        project_name (:obj:`str`): name of project, e.g. GitHub repository name
        build_num (:obj:`int`): CircleCI build number
        package_dir (:obj:`str`): package directories to generate coverage reports for and document

        machine_python_2 (:obj:`str`): python 2 version to use
        machine_python_3 (:obj:`str`): python 3 version to use

        proj_tests_dir (:obj:`str`): local directory with test code
        proj_tests_nose_latest_filename (:obj:`str`): file name to store latest XML test report
        proj_tests_nose_dir (:obj:`str`): local directory where the test reports generated by nose should be saved
        proj_tests_unitth_dir (:obj:`str`): local directory where UnitTH input should be saved
        proj_tests_html_dir (:obj:`str`): local directory where HTML test history report should be saved
        proj_cov_filename (:obj:`str`): file name where coverage report should be saved
        proj_cov_html_dir (:obj:`str`): local directory where HTML coverage report should be saved
        proj_docs_dir (:obj:`str`): local directory with Sphinx configuration
        proj_docs_static_dir (:obj:`str`): local directory of static documentation files
        proj_docs_source_dir (:obj:`str`): local directory of source documentation files created by sphinx-apidoc
        proj_docs_build_html_dir (:obj:`str`): local directory where generated HTML documentation should be saved

        serv_tests_nose_dir (:obj:`str`): server directory where the test reports generated by nose should be saved
        serv_tests_unitth_dir (:obj:`str`): server directory where UnitTH input should be saved
        serv_tests_html_dir (:obj:`str`): server directory where HTML test history report should be saved
        serv_cov_html_dir (:obj:`str`): server directory where HTML coverage report should be saved
        serv_docs_build_html_dir (:obj:`str`): server directory where generated HTML documentation should be saved

        build_artifacts_dir (:obj:`str`): directory which CircleCI will record with each build
        build_test_dir (:obj:`str`): directory where CircleCI will look for test results

        _sftp (:obj:`pysftp.Connection`): sFTP connection to lab server
    """

    DEFAULT_CODE_SERVER_HOSTNAME = 'code.karrlab.org'
    # :obj:`str`: default hostname of server where reports should be uploaded

    DEFAULT_CODE_SERVER_USERNAME = 'karrlab_code'
    # :obj:`str`: default username for server where reports should be uploaded

    DEFAULT_CODE_SERVER_BASE_DIR = '/home/karrlab_code/code.karrlab.org'
    # :obj:`str`: default base directory on server where reports should be uploaded

    DEFAULT_MACHINE_PYTHON_2 = '2.7.11'
    # :obj:`str`: default python 2 version to use

    DEFAULT_MACHINE_PYTHON_3 = '3.4.4'
    # :obj:`str`: default python 3 version to use

    DEFAULT_PROJ_TESTS_DIR = 'tests'
    # :obj:`str`: default local directory with test code

    DEFAULT_PROJ_TESTS_NOSE_LATEST_FILENAME = 'latest'
    # :obj:`str`: default file name to store latest XML test report

    DEFAULT_PROJ_TESTS_NOSE_DIR = 'tests/reports/nose'
    # :obj:`str`: default local directory where the test reports generated by nose should be saved

    DEFAULT_PROJ_TESTS_UNITTH_DIR = 'tests/reports/unitth'
    # :obj:`str`: default local directory where UnitTH input should be saved

    DEFAULT_PROJ_TESTS_HTML_DIR = 'tests/reports/html'
    # :obj:`str`: default local directory where HTML test history report should be saved

    DEFAULT_PROJ_COV_FILENAME = '.coverage'
    # :obj:`str`: default coverage file name

    DEFAULT_PROJ_COV_HTML_DIR = 'tests/reports/coverage'
    # :obj:`str`: default local directory where HTML coverage report should be saved

    DEFAULT_PROJ_DOCS_DIR = 'docs'
    # :obj:`str`: default local directory with Sphinx configuration

    DEFAULT_PROJ_DOCS_STATIC_DIR = 'docs/_static'
    # :obj:`str`: default local directory of static documentation files

    DEFAULT_PROJ_DOCS_SOURCE_DIR = 'docs/source'
    # :obj:`str`: default local directory of source documentation files created by sphinx-apidoc

    DEFAULT_PROJ_DOCS_BUILD_HTML_DIR = 'docs/_build/html'
    # :obj:`str`: default local directory where generated HTML documentation should be saved

    DEFAULT_SERV_TESTS_NOSE_DIR = 'tests/nose'
    # :obj:`str`: default server directory where the test reports generated by nose should be saved

    DEFAULT_SERV_TESTS_UNITTH_DIR = 'tests/unitth'
    # :obj:`str`: default server directory where UnitTH input should be saved

    DEFAULT_SERV_TESTS_HTML_DIR = 'tests/html'
    # :obj:`str`: default server directory where HTML test history report should be saved

    DEFAULT_SERV_COV_HTML_DIR = 'tests/coverage'
    # :obj:`str`: default server directory where HTML coverage report should be saved

    DEFAULT_SERV_DOCS_BUILD_HTML_DIR = 'docs'
    # :obj:`str`: default server directory where generated HTML documentation should be saved

    def __init__(self):
        """ Construct build helper """

        # get settings from environment variables
        self.code_server_hostname = os.getenv('CODE_SERVER_HOSTNAME', BuildHelper.DEFAULT_CODE_SERVER_HOSTNAME)
        self.code_server_username = os.getenv('CODE_SERVER_USERNAME', BuildHelper.DEFAULT_CODE_SERVER_USERNAME)
        self.code_server_password = os.getenv('CODE_SERVER_PASSWORD')
        self.code_server_base_dir = os.getenv('CODE_SERVER_BASE_DIR', BuildHelper.DEFAULT_CODE_SERVER_BASE_DIR)

        self.project_name = os.getenv('CIRCLE_PROJECT_REPONAME', '')
        self.build_num = int(float(os.getenv('CIRCLE_BUILD_NUM', 0)))
        self.package_dir = self.project_name.lower().replace('-', '_')

        self.machine_python_2 = BuildHelper.DEFAULT_MACHINE_PYTHON_2
        self.machine_python_3 = BuildHelper.DEFAULT_MACHINE_PYTHON_3

        self.proj_tests_dir = BuildHelper.DEFAULT_PROJ_TESTS_DIR
        self.proj_tests_nose_latest_filename = BuildHelper.DEFAULT_PROJ_TESTS_NOSE_LATEST_FILENAME
        self.proj_tests_nose_dir = BuildHelper.DEFAULT_PROJ_TESTS_NOSE_DIR
        self.proj_tests_unitth_dir = BuildHelper.DEFAULT_PROJ_TESTS_UNITTH_DIR
        self.proj_tests_html_dir = BuildHelper.DEFAULT_PROJ_TESTS_HTML_DIR
        self.proj_cov_filename = BuildHelper.DEFAULT_PROJ_COV_FILENAME
        self.proj_cov_html_dir = BuildHelper.DEFAULT_PROJ_COV_HTML_DIR
        self.proj_docs_dir = BuildHelper.DEFAULT_PROJ_DOCS_DIR
        self.proj_docs_static_dir = BuildHelper.DEFAULT_PROJ_DOCS_STATIC_DIR
        self.proj_docs_source_dir = BuildHelper.DEFAULT_PROJ_DOCS_SOURCE_DIR
        self.proj_docs_build_html_dir = BuildHelper.DEFAULT_PROJ_DOCS_BUILD_HTML_DIR
        self.serv_tests_nose_dir = BuildHelper.DEFAULT_SERV_TESTS_NOSE_DIR
        self.serv_tests_unitth_dir = BuildHelper.DEFAULT_SERV_TESTS_UNITTH_DIR
        self.serv_tests_html_dir = BuildHelper.DEFAULT_SERV_TESTS_HTML_DIR
        self.serv_cov_html_dir = BuildHelper.DEFAULT_SERV_COV_HTML_DIR
        self.serv_docs_build_html_dir = BuildHelper.DEFAULT_SERV_DOCS_BUILD_HTML_DIR

        self.build_artifacts_dir = os.getenv('CIRCLE_ARTIFACTS')
        self.build_test_dir = os.getenv('CIRCLE_TEST_REPORTS')

        self._sftp = None

    ########################
    # Setup machine
    ########################
    def setup_machine(self):
        """ Setup machine (e.g. set python version) """
        cmd = ['pyenv', 'global']
        if self.machine_python_2:
            cmd.append(self.machine_python_2)
        if self.machine_python_3:
            cmd.append(self.machine_python_3)

        if len(cmd) > 2:
            subprocess.check_call(cmd)

    ########################
    # Installing dependencies
    ########################
    def install_requirements(self):
        """ Install requirements """

        # requirements for package
        if self.machine_python_2:
            subprocess.check_call(['pip2', 'install', '-r', 'requirements.txt'])
        if self.machine_python_3:
            subprocess.check_call(['pip3', 'install', '-r', 'requirements.txt'])

        # requirements for testing and documentation
        subprocess.check_call(['sudo', 'apt-get', 'install', 'libffi-dev'])
        if self.machine_python_2:
            subprocess.check_call(['pip2', 'install', '-r', os.path.join(self.proj_tests_dir, 'requirements.txt')])        
            subprocess.check_call(['pip2', 'install', '-r', os.path.join(self.proj_docs_dir, 'requirements.txt')])
        if self.machine_python_3:
            subprocess.check_call(['pip3', 'install', '-r', os.path.join(self.proj_docs_dir, 'requirements.txt')])
            subprocess.check_call(['pip3', 'install', '-r', os.path.join(self.proj_tests_dir, 'requirements.txt')])

    ########################
    # Running tests
    ########################
    def run_tests(self, test_path='tests', with_xml_report=False, with_coverage=False):
        """ Run unit tests located at `test_path`.
        Optionally, generate a coverage report.
        Optionally, save the results to `xml_file`.

        Args:
            test_path (:obj:`str`, optional): path to tests that should be run
            with_coverage (:obj:`bool`, optional): whether or not coverage should be assessed
            xml_file (:obj:`str`, optional): path to save test results

        Raises:
            :obj:`BuildHelperError`: If package directory not set
        """

        abs_nose_artifact_filename_2 = os.path.join(self.build_test_dir, 'nose.2.xml')
        abs_nose_artifact_filename_3 = os.path.join(self.build_test_dir, 'nose.3.xml')
        abs_nose_latest_filename = os.path.join(self.proj_tests_nose_dir, '%s.xml' % self.proj_tests_nose_latest_filename)
        abs_nose_latest_filename_2 = os.path.join(self.proj_tests_nose_dir, '%s.2.xml' % self.proj_tests_nose_latest_filename)
        abs_nose_latest_filename_3 = os.path.join(self.proj_tests_nose_dir, '%s.3.xml' % self.proj_tests_nose_latest_filename)

        """ python 2"""
        if self.machine_python_2:
            cmd = ['nosetests', test_path]
        
            if with_xml_report:
                cmd.append('--with-xunit')
                cmd.append('--xunit-file=%s' % abs_nose_artifact_filename_2)

                if not os.path.isdir(self.proj_tests_nose_dir):
                    os.makedirs(self.proj_tests_nose_dir)

            if with_coverage:
                if not self.package_dir:
                    raise BuildHelperError('Package directory not set')
                cmd.append('--with-coverage')
                cmd.append('--cover-package=%s' % self.package_dir)

            try:
                subprocess.check_call(cmd)
            except subprocess.CalledProcessError:
               if with_xml_report:
                    shutil.copyfile(abs_nose_artifact_filename_2, abs_nose_latest_filename_2)
               sys.exit(1)
            except Exception:
                t, v, tb = sys.exc_info()
                if sys.version_info >= (3, 0, 0):
                    raise t(v).with_traceback(tb)
                else:
                    raise(t, v, tb)

            if with_xml_report:
                shutil.copyfile(abs_nose_artifact_filename_2, abs_nose_latest_filename_2)

        """ python 3"""
        if self.machine_python_3:
            cmd = ['python3', '-m', 'nose', test_path]
        
            if with_xml_report:
                cmd.append('--with-xunit')
                cmd.append('--xunit-file=%s' % abs_nose_artifact_filename_3)

                if not os.path.isdir(self.proj_tests_nose_dir):
                    os.makedirs(self.proj_tests_nose_dir)

            if with_coverage:
                if not self.package_dir:
                    raise BuildHelperError('Package directory not set')
                cmd.append('--with-coverage')
                cmd.append('--cover-package=%s' % self.package_dir)

            try:
                subprocess.check_call(cmd)
            except subprocess.CalledProcessError:
                if with_xml_report:
                    shutil.copyfile(abs_nose_artifact_filename_3, abs_nose_latest_filename_3)
                sys.exit(1)
            except Exception:
                t, v, tb = sys.exc_info()
                if sys.version_info >= (3, 0, 0):
                    raise t(v).with_traceback(tb)
                else:
                    raise(t, v, tb)

            if with_xml_report:
                shutil.copyfile(abs_nose_artifact_filename_3, abs_nose_latest_filename_3)

        """ archive results """
        if with_xml_report and self.build_test_dir:
            if self.machine_python_2:
                shutil.copyfile(abs_nose_artifact_filename_2, os.path.join(self.build_test_dir, 'nose.xml'))
                shutil.copyfile(abs_nose_artifact_filename_2, abs_nose_latest_filename)
            if self.machine_python_2:
                shutil.copyfile(abs_nose_artifact_filename_3, os.path.join(self.build_test_dir, 'nose.xml'))
                shutil.copyfile(abs_nose_artifact_filename_3, abs_nose_latest_filename)

    def make_and_archive_reports(self):
        """ Make and archive reports;
        * Generate HTML test history reports
        * Generate HTML coverage reports
        * Generate HTML API documentation
        * Archive reports to Coveralls
        """

        """ test reports """
        # create directory with test result history
        self.download_nose_test_report_history_from_lab_server()
        shutil.copyfile(
            os.path.join(self.proj_tests_nose_dir, '%s.xml' % self.proj_tests_nose_latest_filename),
            os.path.join(self.proj_tests_nose_dir, "%d.xml" % self.build_num)
        )

        # make report of test history
        self.make_test_history_report()

        # copy test history to lab server
        self.archive_test_reports()

        """ coverage """
        # Copy coverage report to artifacts directory
        # Upload coverage report to Coveralls
        self.archive_coverage_report()

        """ documentation """
        self.make_documentation()
        self.archive_documentation()

    ########################
    # Test reports
    ########################

    def download_nose_test_report_history_from_lab_server(self):
        """ Download XML test report history from lab server """

        if not os.path.isdir(self.proj_tests_nose_dir):
            os.makedirs(self.proj_tests_nose_dir)
        for report_filename in glob(os.path.join(self.proj_tests_nose_dir, "[0-9]*.xml")):
            os.remove(report_filename)

        sftp = self.connect_to_lab_server()

        with iocapture.capture() as captured:
            with sftp.cd(os.path.join(self.code_server_base_dir, self.project_name)):
                sftp.makedirs(self.serv_tests_nose_dir)
                sftp.get_d(self.serv_tests_nose_dir, self.proj_tests_nose_dir)

    def make_test_history_report(self):
        """ Make an HTML test history report from a directory of nose-style XML test reports 

        Raises:
            :obj:`BuildHelperError`: 
        """

        if not os.path.isdir(self.proj_tests_unitth_dir):
            os.makedirs(self.proj_tests_unitth_dir)

        # remove old UnitTH input
        for path in os.listdir(self.proj_tests_unitth_dir):
            full_path = os.path.join(self.proj_tests_unitth_dir, path)
            if os.path.isdir(full_path):
                shutil.rmtree(full_path)
            else:
                os.remove(full_path)

        # Make XML and HTML test reports that are readable UnitTH
        for build_file_path in glob(os.path.join(self.proj_tests_nose_dir, "[0-9]*.xml")):
            build_base_name = os.path.basename(build_file_path)
            build_num = os.path.splitext(build_base_name)[0]

            # Split nose-style XML report into UnitTH-style reports for each package
            if not os.path.isdir(os.path.join(self.proj_tests_unitth_dir, build_num)):
                os.makedirs(os.path.join(self.proj_tests_unitth_dir, build_num))

            Nose2UnitthConverter.run(build_file_path, os.path.join(self.proj_tests_unitth_dir, build_num))

            # Make HTML report from nose-style test XML report
            with open(os.path.join(os.path.join(self.proj_tests_unitth_dir, build_num, 'index.html')), 'wb') as html_file:
                html_file.write(JunitParser(build_file_path).html().encode('utf-8'))

        # Make HTML test history report
        if not os.path.isdir(self.proj_tests_html_dir):
            os.makedirs(self.proj_tests_html_dir)

        UnitTH.run(os.path.join(self.proj_tests_unitth_dir, '*'),
                   xml_report_filter='',
                   html_report_path='.',
                   generate_exec_time_graphs=True,
                   html_report_dir=self.proj_tests_html_dir)

    def archive_test_reports(self):
        """ Archive test report:
        * Upload XML and HTML test reports to lab server
        """

        self.upload_test_reports_to_lab_server()

    def upload_test_reports_to_lab_server(self):
        """ Upload XML and HTML test reports to lab server """

        sftp = self.connect_to_lab_server()

        with iocapture.capture() as captured:
            with sftp.cd(os.path.join(self.code_server_base_dir, self.project_name)):
                sftp.makedirs(self.serv_tests_nose_dir)
                sftp.makedirs(self.serv_tests_unitth_dir)
                sftp.makedirs(self.serv_tests_html_dir)
                sftp.makedirs(os.path.join(self.serv_tests_unitth_dir, '%d' % self.build_num))

                sftp.put(os.path.join(self.proj_tests_nose_dir, '%d.xml' % self.build_num),
                         os.path.join(self.serv_tests_nose_dir, '%d.xml' % self.build_num))
                sftp.put_r(os.path.join(self.proj_tests_unitth_dir, '%d' % self.build_num),
                           os.path.join(self.serv_tests_unitth_dir, '%d' % self.build_num))
                sftp.put_r(self.proj_tests_html_dir, self.serv_tests_html_dir)

    ########################
    # Coverage reports
    ########################

    def make_html_coverage_report(self):
        """ Make HTML coverage report from `proj_cov_filename` """
        if not os.path.isdir(self.proj_cov_html_dir):
            os.makedirs(self.proj_cov_html_dir)
        map(os.remove, glob(os.path.join(self.proj_cov_html_dir, '*')))
        subprocess.check_call(['coverage', 'html', '-d', self.proj_cov_html_dir])

    def archive_coverage_report(self):
        """ Archive coverage report:
        * Copy report to artifacts directory
        * Upload report to Coveralls
        """

        # copy to artifacts directory
        self.copy_coverage_report_to_artifacts_directory()

        # upload to Coveralls
        self.upload_coverage_report_to_coveralls()

    def copy_coverage_report_to_artifacts_directory(self):
        """ Copy coverage report to CircleCI artifacts directory """
        if self.build_artifacts_dir:
            shutil.copyfile(self.proj_cov_filename, os.path.join(self.build_artifacts_dir, self.proj_cov_filename))

    def upload_coverage_report_to_coveralls(self):
        """ Upload coverage report to Coveralls """
        if os.getenv('COVERALLS_REPO_TOKEN'):
            subprocess.check_call('coveralls')

    def upload_html_coverage_report_to_lab_server(self):
        """ Upload HTML coverage report to lab server """

        sftp = self.connect_to_lab_server()

        with iocapture.capture() as captured:
            with sftp.cd(os.path.join(self.code_server_base_dir, self.project_name)):
                sftp.makedirs(self.serv_cov_html_dir)
                sftp.put_r(self.proj_cov_html_dir, self.serv_cov_html_dir)

    ########################
    # Documentation
    ########################

    def make_documentation(self):
        """ Make HTML documentation using Sphinx for one or more packages. Save documentation to `proj_docs_build_html_dir` 

        Raises:
            :obj:`BuildHelperError`: If project name or code server password not set
        """

        # create `proj_docs_static_dir`, if necessary
        if not os.path.isdir(self.proj_docs_static_dir):
            os.mkdir(self.proj_docs_static_dir)

        # compile API documentation
        if not self.package_dir:
            raise BuildHelperError('Package directory not set')
        subprocess.check_call(['sphinx-apidoc', '-f', '-o', self.proj_docs_source_dir, self.package_dir])

        # build HTML documentation
        subprocess.check_call(['sphinx-build', self.proj_docs_dir, self.proj_docs_build_html_dir])

    def archive_documentation(self):
        """ Archive documentation:
        * Upload documentation to lab server
        """

        self.upload_documentation_to_lab_server()

    def upload_documentation_to_lab_server(self):
        """ Upload documentation to lab server """

        sftp = self.connect_to_lab_server()

        with iocapture.capture() as captured:
            with sftp.cd(os.path.join(self.code_server_base_dir, self.project_name)):
                sftp.makedirs(self.serv_docs_build_html_dir)
                sftp.put_r(self.proj_docs_build_html_dir, self.serv_docs_build_html_dir)

    def connect_to_lab_server(self):
        """ Connect to lab server

        Raises:
            :obj:`BuildHelperError`: If project name or code server password not set
        """

        if not self.project_name:
            raise BuildHelperError('Project name not set')

        if not self.code_server_password:
            raise BuildHelperError('Code server password must be set')

        if not self._sftp:
            cnopts = pysftp.CnOpts()
            cnopts.hostkeys = None
            with iocapture.capture() as captured:
                self._sftp = pysftp.Connection(self.code_server_hostname,
                                               username=self.code_server_username,
                                               password=self.code_server_password,
                                               cnopts=cnopts
                                               )
                self._sftp.makedirs(os.path.join(self.code_server_base_dir, self.project_name))

        return self._sftp

    def disconnect_from_lab_server(self):
        """ Disconnect from lab server """

        if self._sftp:
            self._sftp.close()

        self._sftp = None


class BuildHelperError(Exception):
    pass
