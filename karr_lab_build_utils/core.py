""" Karr Lab build utilities

:Author: Jonathan Karr <karr@mssm.edu>
:Date: 2017-08-02
:Copyright: 2016, Karr Lab
:License: MIT
"""

from glob import glob
import iocapture
import junit2htmlreport
import nose2unitth
import os
import pysftp
import shutil
import subprocess
import tempfile


class BuildHelper(object):
    """ Utility class to help build projects:
    * Run tests
    * Generate HTML test history reports
    * Generate HTML coverage reports
    * Generate HTML API documentation
    * Archive reports to lab server and Coveralls

    Attributes:
        code_server_hostname (:obj:`str`): hostname of server where reports should be uploaded
        code_server_username (:obj:`str`): username for server where reports should be uploaded
        code_server_password (:obj:`str`): password for server where reports should be uploaded
        code_server_base_dir (:obj:`str`): base directory on server where reports should be uploaded

        project_name (:obj:`str`): name of project, e.g. GitHub repository name
        build_num (:obj:`int`): CircleCI build number
        package_dir (:obj:`str`): package directories to generate coverage reports for and document

        proj_tests_dir (:obj:`str`): local directory with test code
        proj_tests_nose_latest_filename (:obj:`str`): file name to store latest XML test report
        proj_tests_nose_dir (:obj:`str`): local directory where the test reports generated by nose should be saved
        proj_tests_unitth_dir (:obj:`str`): local directory where UnitTH input should be saved
        proj_tests_html_dir (:obj:`str`): local directory where HTML test history report should be saved
        proj_cov_filename (:obj:`str`): file name where coverage report should be saved
        proj_cov_html_dir (:obj:`str`): local directory where HTML coverage report should be saved
        proj_docs_dir (:obj:`str`): local directory with Sphinx configuration
        proj_docs_static_dir (:obj:`str`): local directory of static documentation files
        proj_docs_source_dir (:obj:`str`): local directory of source documentation files created by sphinx-apidoc
        proj_docs_build_html_dir (:obj:`str`): local directory where generated HTML documentation should be saved

        serv_tests_nose_dir (:obj:`str`): server directory where the test reports generated by nose should be saved
        serv_tests_unitth_dir (:obj:`str`): server directory where UnitTH input should be saved
        serv_tests_html_dir (:obj:`str`): server directory where HTML test history report should be saved
        serv_cov_html_dir (:obj:`str`): server directory where HTML coverage report should be saved
        serv_docs_build_html_dir (:obj:`str`): server directory where generated HTML documentation should be saved

        build_artifacts_dir (:obj:`str`): directory which CircleCI will record with each build
        build_test_dir (:obj:`str`): directory where CircleCI will look for test results
    """

    _DEFAULT_CODE_SERVER_HOSTNAME = 'code.karrlab.org'
    # :obj:`str`: default hostname of server where reports should be uploaded

    _DEFAULT_CODE_SERVER_USERNAME = 'karrlab_code'
    # :obj:`str`: default username for server where reports should be uploaded

    _DEFAULT_CODE_SERVER_BASE_DIR = '/home/karrlab_code/code.karrlab.org'
    # :obj:`str`: default base directory on server where reports should be uploaded

    _DEFAULT_PROJ_TESTS_DIR = 'tests'
    # :obj:`str`: default local directory with test code

    _DEFAULT_PROJ_TESTS_NOSE_LATEST_FILENAME = 'latest.xml'
    # :obj:`str`: default file name to store latest XML test report

    _DEFAULT_PROJ_TESTS_NOSE_DIR = 'tests/reports/nose'
    # :obj:`str`: default local directory where the test reports generated by nose should be saved

    _DEFAULT_PROJ_TESTS_UNITTH_DIR = 'tests/reports/unitth'
    # :obj:`str`: default local directory where UnitTH input should be saved

    _DEFAULT_PROJ_TESTS_HTML_DIR = 'tests/reports/html'
    # :obj:`str`: default local directory where HTML test history report should be saved

    _DEFAULT_PROJ_COV_FILENAME = '.coverage'
    # :obj:`str`: default coverage file name

    _DEFAULT_PROJ_COV_HTML_DIR = 'tests/reports/coverage'
    # :obj:`str`: default local directory where HTML coverage report should be saved

    _DEFAULT_PROJ_DOCS_DIR = 'docs'
    # :obj:`str`: default local directory with Sphinx configuration

    _DEFAULT_PROJ_DOCS_STATIC_DIR = 'docs/_static'
    # :obj:`str`: default local directory of static documentation files

    _DEFAULT_PROJ_DOCS_SOURCE_DIR = 'docs/source'
    # :obj:`str`: default local directory of source documentation files created by sphinx-apidoc

    _DEFAULT_PROJ_DOCS_BUILD_HTML_DIR = 'docs/_build/html'
    # :obj:`str`: default local directory where generated HTML documentation should be saved

    _DEFAULT_SERV_TESTS_NOSE_DIR = 'tests/nose'
    # :obj:`str`: default server directory where the test reports generated by nose should be saved

    _DEFAULT_SERV_TESTS_UNITTH_DIR = 'tests/unitth'
    # :obj:`str`: default server directory where UnitTH input should be saved

    _DEFAULT_SERV_TESTS_HTML_DIR = 'tests/html'
    # :obj:`str`: default server directory where HTML test history report should be saved

    _DEFAULT_SERV_COV_HTML_DIR = 'tests/coverage'
    # :obj:`str`: default server directory where HTML coverage report should be saved

    _DEFAULT_SERV_DOCS_BUILD_HTML_DIR = 'docs'
    # :obj:`str`: default server directory where generated HTML documentation should be saved

    def __init__(self):
        """ Construct build helper """

        # get settings from environment variables
        self.code_server_hostname = os.getenv('CODE_SERVER_HOSTNAME', BuildHelper._DEFAULT_CODE_SERVER_HOSTNAME)
        self.code_server_username = os.getenv('CODE_SERVER_USERNAME', BuildHelper._DEFAULT_CODE_SERVER_USERNAME)
        self.code_server_password = os.getenv('CODE_SERVER_PASSWORD')
        self.code_server_base_dir = os.getenv('CODE_SERVER_BASE_DIR', BuildHelper._DEFAULT_CODE_SERVER_BASE_DIR)

        self.project_name = os.getenv('CIRCLE_PROJECT_REPONAME', '')
        self.build_num = int(float(os.getenv('CIRCLE_BUILD_NUM', 0)))
        self.package_dir = self.project_name.lower().replace('-', '_')

        self.proj_tests_dir = BuildHelper._DEFAULT_PROJ_TESTS_DIR
        self.proj_tests_nose_latest_filename = BuildHelper._DEFAULT_PROJ_TESTS_NOSE_LATEST_FILENAME
        self.proj_tests_nose_dir = BuildHelper._DEFAULT_PROJ_TESTS_NOSE_DIR
        self.proj_tests_unitth_dir = BuildHelper._DEFAULT_PROJ_TESTS_UNITTH_DIR
        self.proj_tests_html_dir = BuildHelper._DEFAULT_PROJ_TESTS_HTML_DIR
        self.proj_cov_filename = BuildHelper._DEFAULT_PROJ_COV_FILENAME
        self.proj_cov_html_dir = BuildHelper._DEFAULT_PROJ_COV_HTML_DIR
        self.proj_docs_dir = BuildHelper._DEFAULT_PROJ_DOCS_DIR
        self.proj_docs_static_dir = BuildHelper._DEFAULT_PROJ_DOCS_STATIC_DIR
        self.proj_docs_source_dir = BuildHelper._DEFAULT_PROJ_DOCS_SOURCE_DIR
        self.proj_docs_build_html_dir = BuildHelper._DEFAULT_PROJ_DOCS_BUILD_HTML_DIR
        self.serv_tests_nose_dir = BuildHelper._DEFAULT_SERV_TESTS_NOSE_DIR
        self.serv_tests_unitth_dir = BuildHelper._DEFAULT_SERV_TESTS_UNITTH_DIR
        self.serv_tests_html_dir = BuildHelper._DEFAULT_SERV_TESTS_HTML_DIR
        self.serv_cov_html_dir = BuildHelper._DEFAULT_SERV_COV_HTML_DIR
        self.serv_docs_build_html_dir = BuildHelper._DEFAULT_SERV_DOCS_BUILD_HTML_DIR

        self.build_artifacts_dir = os.getenv('CIRCLE_ARTIFACTS')
        self.build_test_dir = os.getenv('CIRCLE_TEST_REPORTS')

    ########################
    # Installing dependencies
    ########################
    def install_requirements(self):
        """ Install requirements """

        # requirements for package
        subprocess.check_call(['sudo', 'pip', 'install', '-r', 'requirements.txt'])

        # requirements for testing and documentation
        subprocess.check_call(['sudo', 'apt-get', 'install', 'libffi-dev'])
        subprocess.check_call(['sudo', 'pip', 'install', '-r', os.path.join(self.proj_tests_dir, 'requirements.txt')])
        subprocess.check_call(['sudo', 'pip', 'install', '-r', os.path.join(self.proj_docs_dir, 'requirements.txt')])

    ########################
    # Running tests
    ########################
    def run_tests(self, test_path='tests', with_xml_report=False, with_coverage=False):
        """ Run unit tests located at `test_path`.
        Optionally, generate a coverage report.
        Optionally, save the results to `xml_file`.

        Args:
            test_path (:obj:`str`, optional): path to tests that should be run
            with_coverage (:obj:`bool`, optional): whether or not coverage should be assessed
            xml_file (:obj:`str`, optional): path to save test results

        Raises:
            :obj:`BuildHelperError`: If package directory not set
        """

        cmd = ['nosetests', test_path]
        
        abs_nose_latest_filename = os.path.join(self.proj_tests_nose_dir, self.proj_tests_nose_latest_filename)
        if with_xml_report:            
            cmd.append('--with-xunit')
            cmd.append('--xunit-file=%s' % abs_nose_latest_filename)

            if not os.path.isdir(self.proj_tests_nose_dir):
                os.makedirs(self.proj_tests_nose_dir)

        if with_coverage:
            if not self.package_dir:
                raise BuildHelperError('Package directory not set')
            cmd.append('--with-coverage')
            cmd.append('--cover-package=%s' % self.package_dir)

        subprocess.check_call(cmd)

        if with_xml_report and self.build_test_dir:
            shutil.copyfile(abs_nose_latest_filename, os.path.join(self.build_test_dir, 'nose.xml'))

    def make_and_archive_reports(self):
        """ Make and archive reports;
        * Generate HTML test history reports
        * Generate HTML coverage reports
        * Generate HTML API documentation
        * Archive reports to lab server and Coveralls
        """

        """ test reports """
        # create directory with test result history
        shutil.copyfile(
            os.path.join(self.proj_tests_nose_dir, self.proj_tests_nose_latest_filename),
            os.path.join(self.proj_tests_nose_dir, "%d.xml" % self.build_num)
        )
        self.download_nose_test_report_history_from_lab_server()

        # make report of test history
        self.make_test_history_report()

        # copy test history to lab server
        self.archive_test_report()

        """ coverage """
        # Create HTML report
        self.make_html_coverage_report()

        # Copy coverage report to artifacts directory
        # Upload coverage report to Coveralls
        # Upload coverage report to lab server
        self.archive_coverage_report()

        """ documentation """
        self.make_documentation()
        self.archive_documentation()

    ########################
    # Test reports
    ########################

    def download_nose_test_report_history_from_lab_server(self):
        """ Download XML test report history from lab server

        Raises:
            :obj:`BuildHelperError`: If project name or code server password not set
        """

        if not self.project_name:
            raise BuildHelperError('Project name not set')

        if not self.code_server_password:
            raise BuildHelperError('Code server password must be set')

        cnopts=pysftp.CnOpts()
        cnopts.hostkeys=None
        with pysftp.Connection(self.code_server_hostname,
                               username = self.code_server_username,
                               password = self.code_server_password,
                               cnopts = cnopts
                               ) as sftp:
            sftp.makedirs(os.path.join(self.code_server_base_dir, self.project_name))
            with sftp.cd(os.path.join(self.code_server_base_dir, self.project_name)):
                sftp.makedirs(self.serv_tests_nose_dir)
                sftp.get_r(self.serv_tests_nose_dir, self.proj_tests_nose_dir)

    def make_test_history_report(self):
        """ Make an HTML test history report from a directory of nose-style XML test reports """

        # Make XML and HTML test reports that are readable UnitTH
        for build_file_path in glob(os.path.join(self.proj_tests_nose_dir, "[0-9]*.xml")):
            build_base_name=os.path.basename(build_file_path)
            build_num=os.path.splitext(build_base_name)

            # Split nose-style XML report into UnitTH-style reports for each package
            if not os.path.isdir(os.path.join(self.proj_tests_unitth_dir, build_num)):
                os.makedirs(os.path.join(self.proj_tests_unitth_dir, build_num))
            nose2unitth.Converter.run(nose_file, os.path.join(self.proj_tests_unitth_dir, build_num))

            # Make HTML report from nose-style test XML report
            with open(os.path.join(os.path.join(self.proj_tests_unitth_dir, build_num, 'index.html')), 'wb') as html_file:
                print >> html_file, junit2htmlreport.parser.Junit(build_file_path).html()

        # Make HTML test history report
        if not os.path.isdir(self.proj_tests_html_dir):
            os.makedirs(self.proj_tests_html_dir)
        subprocess.check_call(['java',
                               '-jar', 'lib/unitth/unitth.jar',
                               '-Dunitth.generate.exectimegraphs=true',
                               '-Dunitth.xml.report.filter=',
                               '-Dunitth.html.report.path=.',
                               '-Dunitth.report.dir=%s' % self.proj_tests_html_dir,
                               os.path.join(self.proj_tests_unitth_dir, '*'),
                               ])

    def archive_test_reports(self):
        """ Archive test report:
        * Upload XML and HTML test reports to lab server
        """

        self.upload_test_reports_to_lab_server()

    def upload_test_reports_to_lab_server(self):
        """ Upload XML and HTML test reports to lab server

        Raises:
            :obj:`BuildHelperError`: If project name or code server password not set
        """

        if not self.project_name:
            raise BuildHelperError('Project name not set')

        if not self.code_server_password:
            raise BuildHelperError('Code server password must be set')

        cnopts=pysftp.CnOpts()
        cnopts.hostkeys=None
        with pysftp.Connection(self.code_server_hostname,
                               username = self.code_server_username,
                               password = self.code_server_password,
                               cnopts = cnopts
                               ) as sftp:
            sftp.makedirs(os.path.join(self.code_server_base_dir, self.project_name))
            with sftp.cd(os.path.join(self.code_server_base_dir, self.project_name)):
                sftp.makedirs(self.serv_tests_nose_dir)
                sftp.makedirs(self.serv_tests_unitth_dir)
                sftp.makedirs(self.serv_tests_html_dir)

                sftp.put(os.path.join(self.proj_tests_nose_dir, '%d.xml' % self.build_num),
                         os.path.join(self.serv_tests_nose_dir, '%d.xml' % self.build_num))
                sftp.put_r(os.path.join(self.proj_tests_unitth_dir, '%d' % self.build_num),
                           os.path.join(self.serv_tests_unitth_dir, '%d' % self.build_num))
                sftp.put_r(self.proj_tests_html_dir, self.serv_tests_html_dir)

    ########################
    # Coverage reports
    ########################

    def make_html_coverage_report(self):
        """ Make HTML coverage report from `proj_cov_filename` """
        if not os.path.isdir(self.proj_cov_html_dir):
            os.makedirs(self.proj_cov_html_dir)
        map(os.remove, glob(os.path.join(self.proj_cov_html_dir, '*')))
        subprocess.check_call(['coverage', 'html', '-d', self.proj_cov_html_dir])

    def archive_coverage_report(self):
        """ Archive coverage report:
        * Copy report to artifacts directory
        * Upload report to Coveralls
        * Upload HTML report to lab server
        """

        # copy to artifacts directory
        self.copy_coverage_report_to_artifacts_directory()

        # upload to Coveralls
        self.upload_coverage_report_to_coveralls()

        # upload to lab server
        self.upload_html_coverage_report_to_lab_server()

    def copy_coverage_report_to_artifacts_directory(self):
        """ Copy coverage report to CircleCI artifacts directory """
        if self.build_artifacts_dir:
            shutil.copyfile(self.proj_cov_filename, os.path.join(self.build_artifacts_dir, self.proj_cov_filename))

    def upload_coverage_report_to_coveralls(self):
        """ Upload coverage report to Coveralls """
        subprocess.check_call('coveralls')

    def upload_html_coverage_report_to_lab_server(self):
        """ Upload HTML coverage report to lab server 

        Raises:
            :obj:`BuildHelperError`: If project name or code server password not set
        """

        if not self.project_name:
            raise BuildHelperError('Project name not set')

        if not self.code_server_password:
            raise BuildHelperError('Code server password must be set')

        cnopts = pysftp.CnOpts()
        cnopts.hostkeys = None
        with pysftp.Connection(self.code_server_hostname,
                               username=self.code_server_username,
                               password=self.code_server_password,
                               cnopts=cnopts
                               ) as sftp:
            sftp.makedirs(os.path.join(self.code_server_base_dir, self.project_name))
            with sftp.cd(os.path.join(self.code_server_base_dir, self.project_name)):
                sftp.makedirs(self.serv_cov_html_dir)
                sftp.put_r(self.proj_cov_html_dir, self.serv_cov_html_dir)

    ########################
    # Documentation
    ########################

    def make_documentation(self):
        """ Make HTML documentation using Sphinx for one or more packages. Save documentation to `proj_docs_build_html_dir` 

        Raises:
            :obj:`BuildHelperError`: If project name or code server password not set
        """

        # create `proj_docs_static_dir`, if necessary
        if not os.path.isdir(self.proj_docs_static_dir):
            sys.mkdir(self.proj_docs_static_dir)

        # compile API documentation
        if not self.package_dir:
            raise BuildHelperError('Package directory not set')
        subprocess.check_call(['sphinx-apidoc', '-f', '-o', self.proj_docs_source_dir, self.package_dir])

        # build HTML documentation
        subprocess.check_call(['sphinx-build', self.proj_docs_dir, self.proj_docs_build_html_dir])

    def archive_documentation(self):
        """ Archive documentation:
        * Upload documentation to lab server
        """

        self.upload_documentation_to_lab_server()

    def upload_documentation_to_lab_server(self):
        """ Upload documentation to lab server 

        Raises:
            :obj:`BuildHelperError`: If project name or code server password not set
        """

        if not self.project_name:
            raise BuildHelperError('Project name not set')

        if not self.code_server_password:
            raise BuildHelperError('Code server password must be set')

        cnopts = pysftp.CnOpts()
        cnopts.hostkeys = None
        with iocapture.capture() as captured:
            with pysftp.Connection(self.code_server_hostname,
                                   username=self.code_server_username,
                                   password=self.code_server_password,
                                   cnopts=cnopts
                                   ) as sftp:
                sftp.makedirs(os.path.join(self.code_server_base_dir, self.project_name))
                with sftp.cd(os.path.join(self.code_server_base_dir, self.project_name)):
                    sftp.makedirs(self.serv_docs_build_html_dir)
                    sftp.put_r(self.proj_docs_build_html_dir, self.serv_docs_build_html_dir)


class BuildHelperError(Exception):
    pass
